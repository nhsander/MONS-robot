#include <Arduino.h>
#include <SD.h>

class Thermistor {

//***********************************************************************\\
//
//  Circuit Diagram
//
//	               10k Thermistor                  10k Resistor
//
//	                  /\    /\                       /\    /\
//	       +5V ------/  \  /  \---------------------/  \  /  \-------|'
//	                     \/             |               \/
//	                                    |
//	                                    |
//	                                    |
//	                               Analog Pin
//
//	Source:
//	http://www.hacktronics.com/Sensors/Thermistor-Temperature-Sensor/flypage.tpl.html
//	http://www.hacktronics.com/Tutorials/arduino-thermistor-tutorial.html
//
//
//***********************************************************************\\

public:
	int pin;                      //Defines pin as a pin number on the Arduino Board that is a variable (integer)
	int milli;                    //Defines amount of time to wait between sample (integer)

	void attach(int pin) {        
		this->pin = pin;
		milli = 10;
	}

	float readC() {              //Outputs Celcius Reading
		double temp;         //A temporary variable
		double raw = analogRead(pin);    //Sets raw equal to the reading from the pin
		delay(milli);        //Delay between readings
		// See http://en.wikipedia.org/wiki/Thermistor for explanation of formula
		temp = log(((10240000.0/raw) - 10000.0));
		temp = 1.0 / (0.001129148 + (0.000234125 * temp) + (0.0000000876741 * temp * temp * temp));
		temp = temp - 273.15;           // Convert Kelvin to Celsius
		return temp;          //Shows the information
	}

	float readF() {            //Converts Celsius to Fahrenheit
		float tempC;
		tempC = readC();
		float tempF;
		tempF = (tempC * 1.8) + 32.0;    
		return tempF;
	}
};

class ThermistorDataCollector {
public:
	int NUM_THERMISTOR;              //Number of Thermistors
	Thermistor *thermistors;         //Creates an array of the Thermistors
	bool metric;

	ThermistorDataCollector(int n, int START_PIN) {          //Initializes the data collector
		this->NUM_THERMISTOR = n;                //Sets n to the number of thermistors
		Thermistor temp[n];              //Initializes the temporary array to the size of n
		thermistors = temp;              //Sets to the temporary array

		for(int i=0; i<n; i++) {
			thermistors[i].attach(START_PIN+i);      //Traverses the array and attaches each thermistors to each pin
		}
	}

	ThermistorDataCollector(int *pinArray) {
		int n = sizeof pinArray;            //n is the size of the array
		this->NUM_THERMISTOR = n;           //sets n equal to the number of thermistors
		Thermistor temp[n];                 //Initializes the temporary array to the size of n 
		thermistors = temp;                 //Sets to the temporary array

		for(int i=0; i<n; i++) {
			thermistors[i].attach(pinArray[i]);    //Traverses the array and attaches each thermistors to each pin
		}
	}

	void setMetric(bool flag) {          //sets metric to flag
		this->metric = flag;
	}

	float* getData() {              //Starts the collection of data
		float temp[NUM_THERMISTOR];      //creates a temporary array of floats
		for(int i=0; i<NUM_THERMISTOR; i++) {      //Goes through all the data from the array and saves it to the float array
			if(metric) {
				temp[i] = thermistors[i].readC();
			} else {
				temp[i] = thermistors[i].readF();
			}
		}
		return temp;
	}

	String readData() {              //Reads all the data in the float array and returns a string
		String temp = "";

		for(int i=0; i<NUM_THERMISTOR; i++) {
			if(metric) {
				temp += fToS(thermistors[i].readC(),1,2);
			} else {
				temp += fToS(thermistors[i].readF(),1,2);
			}
			temp += "\t";
		}
		return temp;
	}

	int writeData() {            //Writes the data to a text file
		String data = readData();

		if(data == "") {        //If there is no data, return a 1
			return 1;
		}

		int timeStamp = millis()/1000;        //Shows what time the data was taken
		data += timeStamp;

		File myFile;                      //Creates a new file called myFile
		pinMode(10, OUTPUT);            //Sets pin 10 to output mode for SD Card

		if (!SD.begin(4)) {          //Opens the SD Card
			return 2;          //If SD doesnt open, return 2
		}


		 myFile = SD.open("data.txt", FILE_WRITE);          //Opens in writing mode

		 if (myFile) {
			 myFile.println(data);          //Writes the data in the textfile
			 myFile.close();
		 } else {
			 return 3;            //If it doesnt write the data, return a 3
		 }

		 return 0;
	}

	static String fToS(float f, int width, int precision) {          //Turns a float into a string
		char temp[10];
		String tempAsString;

		dtostrf(f,width,precision,temp);
		tempAsString = String(temp);
		return tempAsString;
	}
};
/*
class Serial {
public:
	static void begin(int n) {}.
	static void print(String s) {}
	static void print(int n) {}
	static void println(String s) {}
	static void println(int n) {}
};
*/


bool METRIC = true;
char filename[] = "data.txt";
int WAIT_BETWEEN_SAMPLES = 5*1000*60;              //Wait time between taking data
int pins[] = {1,2,3,4,5,6,7,8,9,10};              //Thermistors in pins 1 through 10
ThermistorDataCollector tdc(pins);

void settings() {
	Serial.begin(9600);
	tdc.setMetric(METRIC);
}

void tests() {               //Tests you want to do
	Thermistor t;
	t.attach(0);
	float val = t.readC();
	Serial.println(val);
}

void run() {         //Runs the main method
	while(true) {
		int result = tdc.writeData();

		if(result!=0) {
			int timeStamp = millis()/1000;
			Serial.print("Error: ");
			Serial.print(result);
			Serial.print("\t");
			Serial.print("Time: ");
			Serial.println(timeStamp);
		}

		delay(WAIT_BETWEEN_SAMPLES);
	}
}

void setup() {
	settings();
	while(true) {
		tests();
	}
//	run();
}


void loop() {}